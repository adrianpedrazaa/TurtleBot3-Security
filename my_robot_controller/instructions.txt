To show **visuals directly within a Python program** (and not just in Gazebo or Rviz), you'll need to **embed a visualization GUI** into your ROS 2 node. This is possible using `matplotlib`, `PyQt5`, or `OpenCV` (if you're displaying maps, sensor data, or robot movement in 2D).

Since you want visuals instead of just coordinates, I'll give you an example Python program using **`matplotlib`** that:

* Subscribes to `/odom` (TurtleBot3's odometry topic)
* Plots the robot's path in real-time on a 2D graph

---

## ðŸ§  Live Visualizer: `odom_plotter.py`

```python
#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from nav_msgs.msg import Odometry
import matplotlib.pyplot as plt
import threading

class OdomPlotter(Node):
    def __init__(self):
        super().__init__('odom_plotter')
        self.subscription = self.create_subscription(
            Odometry,
            '/odom',
            self.odom_callback,
            10)
        self.x_data = []
        self.y_data = []

        # Start the matplotlib plot in a separate thread
        self.plot_thread = threading.Thread(target=self.plot_trajectory)
        self.plot_thread.start()

    def odom_callback(self, msg):
        x = msg.pose.pose.position.x
        y = msg.pose.pose.position.y
        self.x_data.append(x)
        self.y_data.append(y)
        self.get_logger().info(f"Position: x={x:.2f}, y={y:.2f}")

    def plot_trajectory(self):
        plt.ion()
        fig, ax = plt.subplots()
        while rclpy.ok():
            ax.clear()
            ax.plot(self.x_data, self.y_data, 'b.-')
            ax.set_title("TurtleBot3 Trajectory")
            ax.set_xlabel("X Position (m)")
            ax.set_ylabel("Y Position (m)")
            ax.grid(True)
            plt.pause(0.1)

def main(args=None):
    rclpy.init(args=args)
    node = OdomPlotter()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
```

---

## ðŸ§ª To run this:

1. Install `matplotlib`:

   ```bash
   pip3 install matplotlib
   ```

2. Make the script executable:

   ```bash
   chmod +x odom_plotter.py
   ```

3. Launch your simulation (e.g. in Gazebo):

   ```bash
   export TURTLEBOT3_MODEL=burger
   ros2 launch turtlebot3_gazebo turtlebot3_world.launch.py
   ```

4. Start the circle\_mover:

   ```bash
   ros2 run turtlebot3_security_nodes circle_mover
   ```

5. Run the plotter node:

   ```bash
   ros2 run turtlebot3_security_nodes odom_plotter
   ```

---

âœ… Youâ€™ll see a **real-time plot** of the TurtleBot3 moving in a circle.

Would you like a version that also plots **laser scans** or **camera image feed** in Python?
